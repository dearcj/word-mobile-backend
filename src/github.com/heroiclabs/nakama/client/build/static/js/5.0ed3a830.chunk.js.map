{"version":3,"sources":["../static/js/5.0ed3a830.chunk.js","views/Tournament/Tournament.js","../node_modules/react-scripts/node_modules/webpack/buildin/module.js","../node_modules/moment/moment.js"],"names":["webpackJsonp","249","module","__webpack_exports__","__webpack_require__","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","setPrototypeOf","__proto__","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities__","__WEBPACK_IMPORTED_MODULE_2__App__","__WEBPACK_IMPORTED_MODULE_3_moment__","__WEBPACK_IMPORTED_MODULE_3_moment___default","__WEBPACK_IMPORTED_MODULE_4_reactstrap__","__WEBPACK_IMPORTED_MODULE_5__Dashboard__","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","Tournament","_Component","this","_this","getPrototypeOf","toggle","bind","onRadioBtnClick","state","curTournament","tournaments","currentCat","currentCatId","currentCatName","showSaveNot","filter","session","update","RedirectLogin","t","setState","cid","_this2","deleteTournament","id","res","console","log","_this3","updateTournament","tournament","cat","category","setTimeout","_this4","getTournaments","text","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","dropdownOpen","radioSelected","editingTournament","window","location","_this5","addTournament","e","checked","inx","summ","x","rounds","award","event","_this6","reader","FileReader","onload","imageData","result","files","readAsDataURL","fileSize","size","buttonStyle","border","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_React$createElement","push","a","style","width","className","type","onClick","onCopy","name","replace","c","toUpperCase","language_str","start_date","format","cur_participants","participants","summRounds","status_str","editTournament","toDelete","data-toggle","data-target","err","return","onChange","changeUnpublished","htmlFor","changePublished","changeActive","changeFinished","hover","responsive","ondelete","nottext","catid","catname","294","exports","webpackPolyfill","deprecate","paths","children","get","l","296","global","factory","hooks","hookCallback","apply","arguments","isArray","input","Array","toString","isObject","isObjectEmpty","getOwnPropertyNames","k","hasOwnProperty","isUndefined","isNumber","isDate","Date","map","arr","fn","hasOwnProp","b","extend","valueOf","createUTC","locale","strict","createLocalOrUTC","utc","defaultParsingFlags","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","meridiem","rfc2822","weekdayMismatch","getParsingFlags","m","_pf","isValid","_isValid","flags","parsedParts","some","isNowValid","isNaN","_d","getTime","invalidWeekday","_strict","bigHour","isFrozen","createInvalid","NaN","copyConfig","to","from","prop","val","_isAMomentObject","_i","_f","_l","_tzm","_isUTC","_offset","_locale","momentProperties","Moment","config","updateInProgress","updateOffset","isMoment","absFloor","number","Math","ceil","floor","toInt","argumentForCoercion","coercedNumber","isFinite","compareArrays","array1","array2","dontConvert","len","min","lengthDiff","abs","diffs","warn","msg","suppressDeprecationWarnings","firstTime","deprecationHandler","arg","args","slice","join","Error","stack","deprecateSimple","deprecations","isFunction","Function","set","_config","_dayOfMonthOrdinalParseLenient","RegExp","_dayOfMonthOrdinalParse","source","_ordinalParse","mergeConfigs","parentConfig","childConfig","Locale","calendar","mom","now","output","_calendar","longDateFormat","_longDateFormat","formatUpper","invalidDate","_invalidDate","ordinal","_ordinal","relativeTime","withoutSuffix","string","isFuture","_relativeTime","pastFuture","diff","addUnitAlias","unit","shorthand","lowerCase","toLowerCase","aliases","normalizeUnits","units","normalizeObjectUnits","inputObject","normalizedProp","normalizedInput","addUnitPriority","priority","priorities","getPrioritizedUnits","unitsObj","u","sort","zeroFill","targetLength","forceSign","absNumber","zerosToFill","pow","max","substr","addFormatToken","token","padded","callback","func","formatTokenFunctions","localeData","removeFormattingTokens","match","makeFormatFunction","array","formattingTokens","formatMoment","expandFormat","formatFunctions","replaceLongDateFormatTokens","localFormattingTokens","lastIndex","test","addRegexToken","regex","strictRegex","regexes","isStrict","getParseRegexForToken","unescapeFormat","s","regexEscape","matched","p1","p2","p3","p4","addParseToken","tokens","addWeekParseToken","_w","addTimeToArrayFromToken","_a","daysInYear","year","isLeapYear","getIsLeapYear","makeGetSet","keepTime","set$1","month","date","daysInMonth","stringGet","stringSet","prioritized","mod","modMonth","localeMonths","_months","isFormat","MONTHS_IN_FORMAT","localeMonthsShort","_monthsShort","handleStrictParse","monthName","ii","llc","toLocaleLowerCase","_monthsParse","_longMonthsParse","_shortMonthsParse","monthsShort","months","indexOf","localeMonthsParse","_monthsParseExact","setMonth","dayOfMonth","monthsParse","getSetMonth","getDaysInMonth","monthsShortRegex","computeMonthsParse","_monthsShortStrictRegex","_monthsShortRegex","defaultMonthsShortRegex","monthsRegex","_monthsStrictRegex","_monthsRegex","defaultMonthsRegex","cmpLenRev","shortPieces","longPieces","mixedPieces","createDate","y","d","h","M","ms","getFullYear","setFullYear","createUTCDate","UTC","getUTCFullYear","setUTCFullYear","firstWeekOffset","dow","doy","fwd","getUTCDay","dayOfYearFromWeeks","week","weekday","resYear","resDayOfYear","localWeekday","weekOffset","dayOfYear","weekOfYear","resWeek","weeksInYear","weekOffsetNext","localeWeek","_week","localeFirstDayOfWeek","localeFirstDayOfYear","getSetWeek","add","getSetISOWeek","parseWeekday","weekdaysParse","parseInt","parseIsoWeekday","localeWeekdays","_weekdays","day","localeWeekdaysShort","_weekdaysShort","localeWeekdaysMin","_weekdaysMin","handleStrictParse$1","weekdayName","_weekdaysParse","_shortWeekdaysParse","_minWeekdaysParse","weekdaysMin","weekdaysShort","weekdays","localeWeekdaysParse","_weekdaysParseExact","_fullWeekdaysParse","getSetDayOfWeek","getDay","getSetLocaleDayOfWeek","getSetISODayOfWeek","weekdaysRegex","computeWeekdaysParse","_weekdaysStrictRegex","_weekdaysRegex","defaultWeekdaysRegex","weekdaysShortRegex","_weekdaysShortStrictRegex","_weekdaysShortRegex","defaultWeekdaysShortRegex","weekdaysMinRegex","_weekdaysMinStrictRegex","_weekdaysMinRegex","defaultWeekdaysMinRegex","minp","shortp","longp","minPieces","hFormat","hours","kFormat","lowercase","minutes","matchMeridiem","_meridiemParse","localeIsPM","charAt","localeMeridiem","isLower","normalizeLocale","chooseLocale","names","j","split","loadLocale","globalLocale","oldLocale","locales","_abbr","code","getSetGlobalLocale","values","data","getLocale","defineLocale","baseConfig","abbr","parentLocale","localeFamilies","forEach","updateLocale","tmpLocale","listLocales","keys","checkOverflow","MONTH","DATE","YEAR","HOUR","MINUTE","SECOND","MILLISECOND","_overflowDayOfYear","_overflowWeeks","WEEK","_overflowWeekday","WEEKDAY","defaults","currentDateArray","nowValue","_useUTC","getUTCMonth","getUTCDate","getMonth","getDate","configFromArray","currentDate","expectedWeekday","yearToUse","dayOfYearFromWeekInfo","_dayOfYear","_nextDay","setUTCMinutes","getUTCMinutes","w","weekYear","temp","weekdayOverflow","GG","W","E","createLocal","curWeek","gg","configFromISO","allowTime","dateFormat","timeFormat","tzFormat","extendedIsoRegex","exec","basicIsoRegex","isoDates","isoTimes","tzRegex","configFromStringAndFormat","extractFromRFC2822Strings","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","untruncateYear","defaultLocaleMonthsShort","preprocessRFC2822","checkWeekday","weekdayStr","parsedInput","defaultLocaleWeekdaysShort","calculateOffset","obsOffset","militaryOffset","numOffset","obsOffsets","hm","configFromRFC2822","parsedArray","configFromString","aspNetJsonRegex","createFromInputFallback","ISO_8601","RFC_2822","skipped","stringLength","totalParsedInputLength","_meridiem","meridiemFixWrap","hour","isPm","meridiemHour","isPM","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","score","configFromObject","minute","second","millisecond","createFromConfig","prepareConfig","preparse","configFromInput","isUTC","pickBy","moments","isDurationValid","ordering","unitHasDecimal","parseFloat","isValid$1","createInvalid$1","createDuration","Duration","duration","years","quarters","quarter","weeks","days","seconds","milliseconds","_milliseconds","_days","_data","_bubble","isDuration","absRound","round","offset","separator","utcOffset","sign","offsetFromString","matcher","matches","chunk","parts","chunkOffset","cloneWithOffset","model","clone","setTime","local","getDateOffset","getTimezoneOffset","getSetOffset","keepLocalTime","keepMinutes","localAdjust","matchShortOffset","_changeInProgress","addSubtract","getSetZone","setOffsetToUTC","setOffsetToLocal","subtract","setOffsetToParsedOffset","tZone","matchOffset","hasAlignedHourOffset","isDaylightSavingTime","isDaylightSavingTimeShifted","_isDSTShifted","other","toArray","isLocal","isUtcOffset","isUtc","ret","diffRes","aspNetRegex","isoRegex","parseIso","momentsDifference","inp","positiveMomentsDifference","base","isAfter","isBefore","createAdder","direction","period","dur","tmp","isAdding","getCalendarFormat","myMoment","calendar$1","time","formats","sod","startOf","calendarFormat","localInput","endOf","isBetween","inclusivity","isSame","inputMs","isSameOrAfter","isSameOrBefore","asFloat","that","zoneDelta","monthDiff","anchor2","adjust","wholeMonthDiff","anchor","toISOString","keepOffset","toDate","inspect","zone","prefix","suffix","inputString","defaultFormatUtc","defaultFormat","postformat","humanize","fromNow","toNow","newLocaleData","isoWeekday","unix","toObject","toJSON","isValid$2","parsingFlags","invalidAt","creationData","addWeekYearFormatToken","getter","getSetWeekYear","getSetWeekYearHelper","getSetISOWeekYear","isoWeek","getISOWeeksInYear","getWeeksInYear","weekInfo","weeksTarget","setWeekAll","dayOfYearData","getSetQuarter","getSetDayOfYear","parseMs","getZoneAbbr","getZoneName","createUnix","createInZone","parseZone","preParsePostFormat","get$1","index","field","setter","listMonthsImpl","out","listWeekdaysImpl","localeSorted","shift","listMonths","listMonthsShort","listWeekdays","listWeekdaysShort","listWeekdaysMin","mathAbs","addSubtract$1","add$1","subtract$1","absCeil","bubble","monthsFromDays","monthsToDays","daysToMonths","as","valueOf$1","makeAs","alias","clone$1","get$2","makeGetter","substituteTimeAgo","relativeTime$1","posNegDuration","thresholds","ss","getSetRelativeTimeRounding","roundingFunction","getSetRelativeTimeThreshold","threshold","limit","withSuffix","toISOString$1","abs$1","Y","D","toFixed","total","asSeconds","totalSign","ymSign","daysSign","hmsSign","fun","defaultCalendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","defaultLongDateFormat","LTS","LT","L","LL","LLL","LLLL","defaultDayOfMonthOrdinalParse","defaultRelativeTime","future","past","mm","hh","dd","MM","yy","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchTimestamp","matchWord","parseTwoDigitYear","getSetYear","o","defaultLocaleMonths","defaultLocaleWeek","defaultLocaleWeekdays","defaultLocaleWeekdaysMin","kInput","_isPm","pos","pos1","pos2","defaultLocaleMeridiemParse","getSetHour","dayOfMonthOrdinalParse","meridiemParse","UT","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","prototypeMin","prototypeMax","invalid","lang","isoWeekYear","getSetDayOfMonth","getSetMinute","getSetSecond","getSetMillisecond","proto","isoWeeks","isoWeeksInYear","isDST","zoneAbbr","zoneName","dates","isDSTShifted","proto$1","firstDayOfYear","firstDayOfWeek","langData","asMilliseconds","asMinutes","asHours","asDays","asWeeks","asMonths","asYears","proto$2","toIsoString","version","relativeTimeRounding","relativeTimeThreshold","HTML5_FMT","DATETIME_LOCAL","DATETIME_LOCAL_SECONDS","DATETIME_LOCAL_MS","TIME","TIME_SECONDS","TIME_MS"],"mappings":"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","file":"static/js/5.0ed3a830.chunk.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 249:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities__ = __webpack_require__(102);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__App__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_moment__ = __webpack_require__(296);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_moment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_reactstrap__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Dashboard__ = __webpack_require__(62);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var brandPrimary=Object(__WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities__[\"getStyle\"])('--primary');var brandInfo=Object(__WEBPACK_IMPORTED_MODULE_1__coreui_coreui_dist_js_coreui_utilities__[\"getStyle\"])('--info');var Tournament=function(_Component){_inherits(Tournament,_Component);_createClass(Tournament,[{key:'toDelete',value:function toDelete(t){this.setState({curTournament:t});}},{key:'deleteTournament',value:function deleteTournament(cid){var _this2=this;__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].deleteTournament(this.state.curTournament.id,function(res){_this2.update();console.log(res);});}},{key:'updateTournament',value:function updateTournament(){var _this3=this;__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].updateTournament(this.state.tournament,function(cat){//dashboard.editingCategory = cat.payload;\n_this3.update(_this3.state.category.id);_this3.setState({showSaveNot:true});setTimeout(function(){_this3.setState({showSaveNot:false});},2000);});}},{key:'update',value:function update(){var _this4=this;__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].getTournaments(this.state.filter,function(tournaments){//dashboard.editingCategory = cat.payload;\n_this4.setState({tournaments:tournaments?tournaments:[]});});}},{key:'save',value:function save(){}}]);function Tournament(props){_classCallCheck(this,Tournament);var _this=_possibleConstructorReturn(this,(Tournament.__proto__||Object.getPrototypeOf(Tournament)).call(this,props));_this.toggle=_this.toggle.bind(_this);_this.onRadioBtnClick=_this.onRadioBtnClick.bind(_this);_this.state={curTournament:{},tournaments:[],currentCat:null,currentCatId:\"\",currentCatName:\"\",showSaveNot:false,filter:[false,false,false,false]};if(!__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].session){__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].RedirectLogin();}else{_this.update();}//  this.update(this.state.category.id);\nreturn _this;}_createClass(Tournament,[{key:'onCopy',value:function onCopy(text){var textField=document.createElement('textarea');textField.innerText=text;document.body.appendChild(textField);textField.select();document.execCommand('copy');textField.remove();}},{key:'toggle',value:function toggle(){this.setState({dropdownOpen:!this.state.dropdownOpen});}},{key:'onRadioBtnClick',value:function onRadioBtnClick(radioSelected){this.setState({radioSelected:radioSelected});}},{key:'editTournament',value:function editTournament(t){__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].editingTournament=t;window.location='#edit_tournament';}},{key:'addTournament',value:function addTournament(){var _this5=this;__WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* dashboard */].addTournament(function(){_this5.update();});}},{key:'changeUnpublished',value:function changeUnpublished(e){this.state.filter[0]=e.target.checked;this.update();}},{key:'changePublished',value:function changePublished(e){this.state.filter[1]=e.target.checked;this.update();}},{key:'changeActive',value:function changeActive(e){this.state.filter[2]=e.target.checked;this.update();}},{key:'changeFinished',value:function changeFinished(e){this.state.filter[3]=e.target.checked;this.update();}},{key:'onCopy',value:function onCopy(text){var textField=document.createElement('textarea');textField.innerText=text;document.body.appendChild(textField);textField.select();document.execCommand('copy');textField.remove();}},{key:'summRounds',value:function summRounds(inx){var summ=0;for(var x in this.state.tournaments[inx].rounds){summ+=this.state.tournaments[inx].rounds[x].award;}return summ;}},{key:'handleUploadFile',value:function handleUploadFile(event){var _this6=this;var reader=new FileReader();reader.onload=function(e){_this6.state.category.imageData=e.target.result;_this6.setState({category:_this6.state.category});};if(event.target.files.length>0)reader.readAsDataURL(event.target.files[0]);this.setState({fileSize:event.target.files[0].size});}},{key:'render',value:function render(){var buttonStyle={border:\"0px\"};var tournaments=[];var inx=0;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.state.tournaments[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var _React$createElement;var t=_step.value;tournaments.push(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('tr',{key:t.id},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{className:'btn btn-primary',style:buttonStyle,type:'button',onClick:this.onCopy.bind(this,t.id),value:'Copy'})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"},className:'pt-3-half'},t.name),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'pt-3-half'},t.location.replace(/^\\w/,function(c){return c.toUpperCase();})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"},className:'pt-3-half'},t.language_str.replace(/^\\w/,function(c){return c.toUpperCase();})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'pt-3-half'},__WEBPACK_IMPORTED_MODULE_3_moment___default()(t.start_date).format('LL')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"},className:'pt-3-half'},t.cur_participants,' / ',t.participants),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'pt-3-half'},t.rounds?t.rounds.length:0),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"},className:'pt-3-half'},this.summRounds(inx)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'pt-3-half'},t.status_str.replace(/^\\w/,function(c){return c.toUpperCase();})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"3%\"},className:'text-right'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span',{style:buttonStyle,onClick:this.editTournament.bind(this,t),type:'button',className:'btn btn-default btn-sm'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span',{className:'cui-pencil h5'}))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{style:{\"width\":\"5%\"},className:'text-right'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',(_React$createElement={type:'button',onClick:this.toDelete.bind(this,t),style:buttonStyle,'data-toggle':'modal','data-target':'#yesnomodal'},_defineProperty(_React$createElement,'style',buttonStyle),_defineProperty(_React$createElement,'className','btn btn-danger'),_React$createElement),'Delete'))));inx++;}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'animated fadeIn'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"_6\" /* Row */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"t\" /* Col */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"i\" /* Card */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"n\" /* CardHeader */],null,'Tournaments'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"j\" /* CardBody */],null,'Filter:',__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'form-check'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{onChange:this.changeUnpublished.bind(this),type:'checkbox',className:'form-check-input',id:'unpub-input'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{className:'form-check-label',htmlFor:'unpub-input'},'Unpublished')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'form-check'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{onChange:this.changePublished.bind(this),id:'pub-input',type:'checkbox',className:'form-check-input'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{className:'form-check-label',htmlFor:'pub-input'},'Published')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'form-check'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{onChange:this.changeActive.bind(this),id:'active-input',type:'checkbox',className:'form-check-input'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{className:'form-check-label',htmlFor:'active-input'},'Active')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'form-check'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{onChange:this.changeFinished.bind(this),id:'fin-input',type:'checkbox',className:'form-check-input'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{className:'form-check-label',htmlFor:'fin-input'},'Finished')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('br',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('br',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_reactstrap__[\"_9\" /* Table */],{hover:true,responsive:true,className:'table-outline mb-0 d-none d-sm-table'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('thead',{className:'thead-light'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('tr',{style:buttonStyle},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Id'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Name'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Location'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Language'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Start date'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Max participants'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Rounds'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Award'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',{className:'text-center'},'Status'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('th',null))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('tbody',null,tournaments,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('tr',{className:'invalid'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'text-center'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'text-center'}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('td',{className:'text-right'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{className:'btn btn-primary',onClick:this.addTournament.bind(this),style:buttonStyle,type:'button',value:'Add'})))))))))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__Dashboard__[\"YesNoModal\"],{ondelete:this.deleteTournament.bind(this),nottext:\"Are you sure you want to delele tournament '\"+this.state.curTournament.id+\"'?\",catid:this.state.currentCatId,catname:this.state.curTournament.name}));}}]);return Tournament;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"default\"] = (Tournament);/*        <YesNoModal ondelete={this.delete.bind(this)} catid={this.state.currentCatId} catname={this.state.currentCatName}>\n        </YesNoModal>*/\n\n/***/ }),\n\n/***/ 294:\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ }),\n\n/***/ 296:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js\n\n;(function (global, factory) {\n     true ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays['standalone'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"./locale\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.22.2';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)(module)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/5.0ed3a830.chunk.js","import React, {Component} from 'react';\nimport {getStyle, hexToRgba} from '@coreui/coreui/dist/js/coreui-utilities'\nimport {dashboard} from '../../App';\nimport moment from 'moment';\nimport {\n  Badge,\n  Button,\n  ButtonDropdown,\n  ButtonGroup,\n  ButtonToolbar,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Col,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Progress,\n  Row,\n  Table,\n} from 'reactstrap';\nimport {YesNoModal} from \"../Dashboard\";\n\nconst brandPrimary = getStyle('--primary');\nconst brandInfo = getStyle('--info');\n\n\nclass Tournament extends Component {\n  toDelete(t) {\n    this.setState({curTournament: t})\n  }\n\n  deleteTournament(cid) {\n     dashboard.deleteTournament(this.state.curTournament.id, (res)=>{\n       this.update();\n       console.log(res);\n     });\n  }\n\n  updateTournament() {\n    dashboard.updateTournament(this.state.tournament, (cat) => {\n      //dashboard.editingCategory = cat.payload;\n      this.update(this.state.category.id);\n\n\n      this.setState({showSaveNot: true});\n      setTimeout(()=>{\n        this.setState({showSaveNot: false});\n      }, 2000)\n    });\n  }\n\n  update() {\n    dashboard.getTournaments(this.state.filter, (tournaments) => {\n      //dashboard.editingCategory = cat.payload;\n      this.setState({tournaments: tournaments?tournaments:[]})\n\n    });\n  }\n\n\n  save() {\n\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n\n\n\n    this.state = {\n      curTournament: {},\n      tournaments: [],\n      currentCat: null,\n      currentCatId: \"\",\n      currentCatName: \"\",\n      showSaveNot: false,\n      filter: [false,false,false,false],\n    };\n    if (!dashboard.session) {\n      dashboard.RedirectLogin();\n    } else {\n      this.update()\n    }\n  //  this.update(this.state.category.id);\n  }\n\n  onCopy(text) {\n    let textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n    });\n  }\n\n  onRadioBtnClick(radioSelected) {\n    this.setState({\n      radioSelected: radioSelected,\n    });\n  }\n\n\n  editTournament(t) {\n    dashboard.editingTournament = t;\n    window.location = '#edit_tournament';\n  }\n\n  addTournament() {\n    dashboard.addTournament(() => {\n      this.update();\n    });\n  }\n\n  changeUnpublished(e){\n    this.state.filter[0] = e.target.checked;\n    this.update()\n  }\n\n  changePublished(e){\n    this.state.filter[1] = e.target.checked;\n    this.update()\n  }\n\n  changeActive(e){\n    this.state.filter[2] = e.target.checked;\n    this.update()\n  }\n\n  changeFinished(e){\n    this.state.filter[3] = e.target.checked;\n    this.update()\n  }\n  onCopy(text) {\n    let textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  summRounds(inx) {\n    let summ = 0;\n    for (let x in this.state.tournaments[inx].rounds) {\n      summ += this.state.tournaments[inx].rounds[x].award\n    }\n\n    return summ\n  }\n\n  handleUploadFile(event) {\n    let reader = new FileReader();\n\n    reader.onload = (e)=> {\n      this.state.category.imageData = e.target.result;\n\n      this.setState({\n        category: this.state.category,\n      });\n    };\n\n    if (event.target.files.length > 0)\n    reader.readAsDataURL(event.target.files[0]);\n\n    this.setState({fileSize: event.target.files[0].size})\n  }\n\n  render() {\n    const buttonStyle = {border: \"0px\"};\n\n    let tournaments = [];\n    let inx = 0;\n    for (let t of this.state.tournaments) {\n      tournaments.push(<tr key={t.id}>\n        <td style={{\"width\": \"5%\"}} >\n          <input className=\"btn btn-primary\" style={buttonStyle} type=\"button\" onClick={this.onCopy.bind(this, t.id)} value=\"Copy\"></input>\n        </td>\n        <td style={{\"width\": \"5%\"}} className=\"pt-3-half\">\n          {t.name}\n        </td>\n        <td className=\"pt-3-half\">\n          {t.location.replace(/^\\w/, c => c.toUpperCase())}\n        </td>\n        <td style={{\"width\": \"5%\"}} className=\"pt-3-half\">\n            {t.language_str.replace(/^\\w/, c => c.toUpperCase())}\n        </td>\n        <td className=\"pt-3-half\">\n          {moment(t.start_date).format('LL')}\n        </td>\n        <td style={{\"width\": \"5%\"}} className=\"pt-3-half\">\n          {t.cur_participants} / {t.participants}\n        </td>\n        <td className=\"pt-3-half\">\n          {t.rounds?t.rounds.length:0}\n        </td>\n        <td style={{\"width\": \"5%\"}} className=\"pt-3-half\">\n          {this.summRounds(inx)}\n        </td>\n        <td className=\"pt-3-half\">\n          {t.status_str.replace(/^\\w/, c => c.toUpperCase())}\n        </td>\n        <td style={{\"width\": \"3%\"}} className=\"text-right\">\n        <span style={buttonStyle} onClick={this.editTournament.bind(this, t)} type=\"button\" className=\"btn btn-default btn-sm\">\n            <span className=\"cui-pencil h5\"></span>\n          </span>\n        </td>\n        <td style={{\"width\": \"5%\"}} className=\"text-right\">\n          <button type=\"button\" onClick={this.toDelete.bind(this, t)} style={buttonStyle}\n                  data-toggle=\"modal\" data-target=\"#yesnomodal\" style={buttonStyle}\n                  className=\"btn btn-danger\">Delete\n          </button>\n        </td>\n      </tr>);\n      inx++\n    }\n\n\n    return (\n      <div>\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <Card>\n                <CardHeader>\n                  Tournaments\n                </CardHeader>\n                <CardBody>\n                  Filter:\n                  <div className=\"form-check\">\n                    <input onChange={this.changeUnpublished.bind(this)} type=\"checkbox\" className=\"form-check-input\" id=\"unpub-input\" ></input>\n                      <label className=\"form-check-label\" htmlFor=\"unpub-input\">Unpublished</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input onChange={this.changePublished.bind(this)}  id=\"pub-input\" type=\"checkbox\" className=\"form-check-input\" ></input>\n                    <label className=\"form-check-label\" htmlFor=\"pub-input\">Published</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input onChange={this.changeActive.bind(this)} id=\"active-input\" type=\"checkbox\" className=\"form-check-input\" ></input>\n                    <label className=\"form-check-label\" htmlFor=\"active-input\">Active</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input onChange={this.changeFinished.bind(this)} id=\"fin-input\" type=\"checkbox\" className=\"form-check-input\" ></input>\n                    <label className=\"form-check-label\" htmlFor=\"fin-input\">Finished</label>\n                  </div>\n\n                  <br/>\n                  <br/>\n                  <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                    <thead className=\"thead-light\">\n                    <tr style={buttonStyle}>\n                      <th className=\"text-center\">Id</th>\n                      <th className=\"text-center\">Name</th>\n                      <th className=\"text-center\">Location</th>\n                      <th className=\"text-center\">Language</th>\n                      <th className=\"text-center\">Start date</th>\n                      <th className=\"text-center\">Max participants</th>\n                      <th className=\"text-center\">Rounds</th>\n                      <th className=\"text-center\">Award</th>\n                      <th className=\"text-center\">Status</th>\n                      <th></th>\n                      <th></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {tournaments}\n                    <tr className=\"invalid\">\n                      <td>\n                      </td>\n                      <td className=\"text-center\">\n                      </td>\n                      <td>\n                      </td>\n                      <td className=\"text-center\">\n                      </td>\n                      <td>\n                      </td>\n                      <td>\n                      </td>\n                      <td>\n                      </td>\n                      <td>\n                      </td>\n                      <td>\n                      </td>\n                      <td>\n                      </td>\n                      <td className=\"text-right\">\n                        <input className=\"btn btn-primary\" onClick={this.addTournament.bind(this)} style={buttonStyle}\n                               type=\"button\" value=\"Add\"></input>\n                      </td>\n                    </tr>\n                    </tbody>\n                  </Table>\n\n                </CardBody>\n\n              </Card>\n            </Col>\n          </Row>\n\n        </div>\n        <YesNoModal ondelete={this.deleteTournament.bind(this)}  nottext={\"Are you sure you want to delele tournament '\" + this.state.curTournament.id + \"'?\"} catid={this.state.currentCatId} catname={this.state.curTournament.name}>\n        </YesNoModal>\n      </div>\n    );\n  }\n}\n\nexport default Tournament;\n/*        <YesNoModal ondelete={this.delete.bind(this)} catid={this.state.currentCatId} catname={this.state.currentCatName}>\n        </YesNoModal>*/\n\n\n\n// WEBPACK FOOTER //\n// ./src/views/Tournament/Tournament.js","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 294\n// module chunks = 0 1 2 3 5 6","//! moment.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays['standalone'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.22.2';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/moment/moment.js\n// module id = 296\n// module chunks = 0 1 2 3 5 6"],"sourceRoot":""}